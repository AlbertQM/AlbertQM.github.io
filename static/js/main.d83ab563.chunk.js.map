{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","thingToDo","setThingToDo","useEffect","a","fetch","resp","json","activity","toLowerCase","className","Avatar","motion","span","whileHover","color","Colors","orange","scale","ProjectPoster","ProjectTitle","title","href","ActivitySuggestion","transition","repeat","Infinity","duration","animate","rotate","div","img","src","alt","border","whileTap","borderColor","type","children","props","initial","y","black","red","yellow","blue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAIe,SAASA,IACtB,MAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,+EAEsBC,MAAM,yCAF5B,cAESC,EAFT,gBAGoDA,EAAKC,OAHzD,gBAGWC,EAHX,EAGWA,SACRN,EAAaM,EAASC,eAJzB,kDAMGP,EACE,iFAPL,yDAAD,KAWC,IAGD,qCACE,sBAAKQ,UAAU,YAAf,UACE,cAACC,EAAD,IACA,sBAAKD,UAAU,kBAAf,qBACW,IACT,cAACE,EAAA,EAAOC,KAAR,CAAaC,WAAY,CAAEC,MAAOC,EAAOC,OAAQC,MAAO,KAAxD,oBAFF,uEAQF,cAACC,EAAD,UACE,cAACC,EAAD,CACEC,MACE,cAACT,EAAA,EAAOR,EAAR,CACEkB,KAAK,6CACLZ,UAAU,gBACVI,WAAY,CAAEI,MAAO,KAHvB,gCAUN,cAACC,EAAD,UACE,cAACI,EAAD,CAAoBtB,UAAWA,MAEjC,cAACkB,EAAD,UACE,cAACC,EAAD,CACEC,MACE,cAACT,EAAA,EAAOC,KAAR,CACEW,WAAY,CAAEC,OAAQC,IAAUC,SAAU,GAC1CC,QAAS,CAAEC,OAAQ,EAAE,GAAI,IAAK,KAFhC,wCAaZ,SAASlB,IACP,OACE,cAACC,EAAA,EAAOkB,IAAR,CAAYpB,UAAW,mBAAvB,SACE,cAACE,EAAA,EAAOmB,IAAR,CACErB,UAAU,aACVsB,IAAI,uDACJC,IAAI,2BACJnB,WAAY,CACVe,OAAQ,IACRK,OAAO,aAAD,OAAelB,EAAOC,SAE9BkB,SAAU,CAAEN,OAAQ,IAAKO,YAAapB,EAAOC,QAC7CO,WAAY,CACVa,KAAM,cAOhB,SAASlB,EAAT,GAAqE,IAA5CmB,EAA2C,EAA3CA,SACvB,OAAO,qBAAK5B,UAAU,iBAAf,SAAiC4B,IAG1C,SAASlB,EAAT,GAA8D,IAAtCC,EAAqC,EAArCA,MACtB,OAAO,wBAAQX,UAAU,gBAAlB,SAAmCW,IAG5C,SAASE,EAAmBgB,GAC1B,IAAQtC,EAAcsC,EAAdtC,UACR,OACE,sBAAKS,UAAU,sBAAf,iDAEGT,GACC,eAACW,EAAA,EAAOkB,IAAR,CAAYU,QAAS,CAAEC,GAAI,KAAOb,QAAS,CAAEa,EAAG,GAAhD,UACGxC,EADH,UAQR,IAAMe,EAAS,CACb0B,MAAO,UACPC,IAAK,UACL1B,OAAQ,UACR2B,OAAQ,UACRC,KAAM,WClGOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d83ab563.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const [thingToDo, setThingToDo] = useState<string | undefined>();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const resp = await fetch(\"https://www.boredapi.com/api/activity\");\r\n        const { activity }: { activity: string } = await resp.json();\r\n        setThingToDo(activity.toLowerCase());\r\n      } catch (error) {\r\n        setThingToDo(\r\n          \"fix the API Albert is using on this website to show a new activity every time\"\r\n        );\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <Avatar />\r\n        <div className=\"intro-container\">\r\n          Hey, I'm{\" \"}\r\n          <motion.span whileHover={{ color: Colors.orange, scale: 1.2 }}>\r\n            Albert\r\n          </motion.span>\r\n          o Morabito. I mostly create Web-related products for a living.\r\n        </div>\r\n      </div>\r\n      <ProjectPoster>\r\n        <ProjectTitle\r\n          title={\r\n            <motion.a\r\n              href=\"https://albertqm.github.io/generative-art/\"\r\n              className=\"project-title\"\r\n              whileHover={{ scale: 1.2 }}\r\n            >\r\n              Generative Art\r\n            </motion.a>\r\n          }\r\n        />\r\n      </ProjectPoster>\r\n      <ProjectPoster>\r\n        <ActivitySuggestion thingToDo={thingToDo} />\r\n      </ProjectPoster>\r\n      <ProjectPoster>\r\n        <ProjectTitle\r\n          title={\r\n            <motion.span\r\n              transition={{ repeat: Infinity, duration: 2 }}\r\n              animate={{ rotate: [-25, 25, -25] }}\r\n            >\r\n              More stuff to come.\r\n            </motion.span>\r\n          }\r\n        />\r\n      </ProjectPoster>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Avatar() {\r\n  return (\r\n    <motion.div className={\"avatar-container\"}>\r\n      <motion.img\r\n        className=\"avatar-img\"\r\n        src=\"https://avatars.githubusercontent.com/u/33761650?v=4\"\r\n        alt=\"A photo of Albert's face\"\r\n        whileHover={{\r\n          rotate: 360,\r\n          border: `4px solid ${Colors.orange}`,\r\n        }}\r\n        whileTap={{ rotate: 360, borderColor: Colors.orange }}\r\n        transition={{\r\n          type: \"spring\",\r\n        }}\r\n      />\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nfunction ProjectPoster({ children }: { children: React.ReactNode }) {\r\n  return <div className=\"project-poster\">{children}</div>;\r\n}\r\n\r\nfunction ProjectTitle({ title }: { title: React.ReactNode }) {\r\n  return <header className=\"project-title\">{title}</header>;\r\n}\r\n\r\nfunction ActivitySuggestion(props: { thingToDo: string | undefined }) {\r\n  const { thingToDo } = props;\r\n  return (\r\n    <div className=\"activity-suggestion\">\r\n      While I build this, why don't you...\r\n      {thingToDo && (\r\n        <motion.div initial={{ y: -500 }} animate={{ y: 0 }}>\r\n          {thingToDo}?\r\n        </motion.div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Colors = {\r\n  black: \"#0c090d\",\r\n  red: \"#e01a4f\",\r\n  orange: \"#f15946\",\r\n  yellow: \"#f9c22e\",\r\n  blue: \"#53b3cb\",\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}