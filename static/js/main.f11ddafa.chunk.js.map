{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","thingToDo","setThingToDo","mousePos","setMousePos","useEffect","a","fetch","resp","json","activity","toLowerCase","onMouseMove","e","movementX","movementY","x","y","window","addEventListener","removeEventListener","className","motion","span","transition","repeat","Infinity","duration","animate","rotate","div","initial","style","width","CURSOR_RADIUS","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPASe,SAASA,IACtB,MAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAA4B,MAA5D,mBAAOG,EAAP,KAAiBC,EAAjB,KAoCA,OAlCAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,+EAEsBC,MAAM,yCAF5B,cAESC,EAFT,gBAGoDA,EAAKC,OAHzD,gBAGWC,EAHX,EAGWA,SACRR,EAAaQ,EAASC,eAJzB,kDAMGT,EACE,iFAPL,yDAAD,KAWC,IAEHG,qBAAU,WAER,SAASO,EAAYC,GAEnB,KADiC,IAAhBA,EAAEC,WAAmC,IAAhBD,EAAEE,WACxC,CAKA,IAAQC,EAASH,EAATG,EAAGC,EAAMJ,EAANI,EACXb,EAAY,CAAEY,IAAGC,OAKnB,OAFAC,OAAOC,iBAAiB,YAAaP,GAE9B,WACLM,OAAOE,oBAAoB,YAAaR,MAEzC,IAGD,sBAAKS,UAAU,YAAf,UACE,wBAAQA,UAAU,MAAlB,SACE,cAACC,EAAA,EAAOC,KAAR,CACEC,WAAY,CAAEC,OAAQC,IAAUC,SAAU,GAC1CC,QAAS,CAAEC,OAAQ,EAAE,GAAI,IAAK,KAFhC,iCAOF,sBAAKR,UAAU,sBAAf,0DAEGpB,GACC,eAACqB,EAAA,EAAOQ,IAAR,CAAYC,QAAS,CAAEd,EAAG,KAAOW,QAAS,CAAEX,EAAG,GAA/C,UACGhB,EADH,UAKHE,GACC,cAACmB,EAAA,EAAOQ,IAAR,CACEF,QAAS,CACPZ,EAAGb,EAASa,EAhEF,GAiEVC,EAAGd,EAASc,EAjEF,IAmEZI,UAAU,SACVW,MAAO,CAAEC,MAAOC,GAAmBC,OAAQD,SCtErD,IAYeE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f11ddafa.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\n\nconst CURSOR_RADIUS = 25;\ntype Position2D = {\n  x: number;\n  y: number;\n};\nexport default function App() {\n  const [thingToDo, setThingToDo] = useState<string | undefined>();\n  const [mousePos, setMousePos] = useState<Position2D | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resp = await fetch(\"https://www.boredapi.com/api/activity\");\n        const { activity }: { activity: string } = await resp.json();\n        setThingToDo(activity.toLowerCase());\n      } catch (error) {\n        setThingToDo(\n          \"fix the API Albert is using on this website to show a new activity every time\"\n        );\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    // TODO throttle this function.\n    function onMouseMove(e: MouseEvent) {\n      const isMobile = e.movementX === 0 && e.movementY === 0;\n      if (isMobile) {\n        // TODO Add animation for mobile\n        return;\n      }\n\n      const { x, y } = e;\n      setMousePos({ x, y });\n    }\n\n    window.addEventListener(\"mousemove\", onMouseMove);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", onMouseMove);\n    };\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <header className=\"WIP\">\n        <motion.span\n          transition={{ repeat: Infinity, duration: 2 }}\n          animate={{ rotate: [-25, 25, -25] }}\n        >\n          Work in progress.\n        </motion.span>\n      </header>\n      <div className=\"activity-suggestion\">\n        However, while I build this, why don't you...\n        {thingToDo && (\n          <motion.div initial={{ y: 500 }} animate={{ y: 0 }}>\n            {thingToDo}?\n          </motion.div>\n        )}\n      </div>\n      {mousePos && (\n        <motion.div\n          animate={{\n            x: mousePos.x - CURSOR_RADIUS,\n            y: mousePos.y - CURSOR_RADIUS,\n          }}\n          className=\"cursor\"\n          style={{ width: CURSOR_RADIUS * 2, height: CURSOR_RADIUS * 2 }}\n        />\n      )}\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}