{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["GENERATIVE_ART_URL","App","useState","thingToDo","setThingToDo","getRandomColor","hoverColor","setHoverColor","hueRotate","setHueRotate","brightness","setBrightness","useEffect","a","fetch","resp","json","activity","toLowerCase","style","filter","className","Knob","onDrag","x","window","innerWidth","Avatar","ProjectPoster","whileHover","variants","actionButton","backgroundColor","onMouseLeave","onClick","location","href","ProjectTitle","title","motion","scale","ActivitySuggestion","span","transition","repeat","Infinity","duration","animate","rotate","img","src","alt","whileTap","type","children","div","cx","clickable","Boolean","props","initial","y","handleDrag","useCallback","_e","point","drag","whileDrag","dragConstraints","left","right","cursor","dragMomentum","randomHex","Math","floor","random","toString","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81bad757.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport cx from \"classnames\";\r\nimport { AnimationProps, HoverHandlers, motion, PanInfo } from \"framer-motion\";\r\n\r\nimport \"./App.css\";\r\nimport \"./Reset.css\";\r\n\r\nconst GENERATIVE_ART_URL = \"https://albertqm.github.io/generative-art/\";\r\n\r\nexport default function App() {\r\n  const [thingToDo, setThingToDo] = useState<string | undefined>();\r\n  const [hoverColor, setHoverColor] = useState(getRandomColor());\r\n\r\n  const [hueRotate, setHueRotate] = useState(0);\r\n  const [brightness, setBrightness] = useState(1);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const resp = await fetch(\"https://www.boredapi.com/api/activity\");\r\n        const { activity }: { activity: string } = await resp.json();\r\n        setThingToDo(activity.toLowerCase());\r\n      } catch (error) {\r\n        setThingToDo(\r\n          \"fix the API Albert is using on this website to show a new activity every time\"\r\n        );\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        filter: `hue-rotate(${hueRotate}deg) brightness(${brightness})`,\r\n      }}\r\n    >\r\n      <div className=\"controls\">\r\n        <Knob onDrag={({ x }) => setHueRotate(x)}>ðŸŽ¨</Knob>\r\n        <Knob\r\n          onDrag={({ x }) => setBrightness(1 - x / (window.innerWidth - 50))}\r\n        >\r\n          ðŸ’¡\r\n        </Knob>\r\n      </div>\r\n      <div className=\"container\">\r\n        <Avatar />\r\n        <div className=\"intro-container\">\r\n          {`Hey, I'm Albert. \r\n          I mostly create Web-related products for a living.`}\r\n        </div>\r\n      </div>\r\n      <ProjectPoster\r\n        whileHover=\"actionButton\"\r\n        variants={{ actionButton: { backgroundColor: hoverColor } }}\r\n        onMouseLeave={() => setHoverColor(getRandomColor())}\r\n        onClick={() => (window.location.href = GENERATIVE_ART_URL)}\r\n      >\r\n        <ProjectTitle\r\n          title={\r\n            <motion.a\r\n              href={GENERATIVE_ART_URL}\r\n              className=\"project-title\"\r\n              variants={{ actionButton: { scale: 1.2 } }}\r\n            >\r\n              Generative Art\r\n            </motion.a>\r\n          }\r\n        />\r\n      </ProjectPoster>\r\n      <ProjectPoster>\r\n        <ActivitySuggestion thingToDo={thingToDo} />\r\n      </ProjectPoster>\r\n      <ProjectPoster>\r\n        <ProjectTitle\r\n          title={\r\n            <motion.span\r\n              transition={{ repeat: Infinity, duration: 2 }}\r\n              animate={{ rotate: [-10, 10, -10] }}\r\n            >\r\n              More stuff to come...\r\n            </motion.span>\r\n          }\r\n        />\r\n      </ProjectPoster>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Avatar() {\r\n  return (\r\n    <div className=\"avatar-container\">\r\n      <motion.img\r\n        className=\"avatar-img\"\r\n        src=\"https://avatars.githubusercontent.com/u/33761650?v=4\"\r\n        alt=\"A photo of Albert's face\"\r\n        whileHover={{\r\n          rotate: 360,\r\n        }}\r\n        whileTap={{ rotate: 360 }}\r\n        transition={{\r\n          type: \"spring\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ProjectPoster({\r\n  children,\r\n  whileHover,\r\n  variants,\r\n  onClick,\r\n  onMouseLeave,\r\n}: {\r\n  children: React.ReactNode;\r\n  whileHover?: HoverHandlers[\"whileHover\"];\r\n  variants?: AnimationProps[\"variants\"];\r\n  onClick?: () => void;\r\n  onMouseLeave?: () => void;\r\n}) {\r\n  return (\r\n    <motion.div\r\n      className={cx(\"project-poster\", { clickable: Boolean(onClick) })}\r\n      whileHover={whileHover}\r\n      variants={variants}\r\n      onMouseLeave={onMouseLeave}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nfunction ProjectTitle({ title }: { title: React.ReactNode }) {\r\n  return <header className=\"project-title\">{title}</header>;\r\n}\r\n\r\nfunction ActivitySuggestion(props: { thingToDo: string | undefined }) {\r\n  const { thingToDo } = props;\r\n  return (\r\n    <div className=\"activity-suggestion\">\r\n      While I build this, why don't you...\r\n      {thingToDo && (\r\n        <motion.div initial={{ y: -500 }} animate={{ y: 0 }}>\r\n          {thingToDo}?\r\n        </motion.div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Knob({\r\n  children,\r\n  onDrag,\r\n}: React.PropsWithChildren<{\r\n  onDrag: ({ x, y }: { x: number; y: number }) => void;\r\n}>) {\r\n  const handleDrag = useCallback(\r\n    (_e, { point: { x, y } }: PanInfo) => {\r\n      onDrag({ x, y });\r\n    },\r\n    [onDrag]\r\n  );\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"knob\"\r\n      drag=\"x\"\r\n      whileDrag={{ scale: 1.1 }}\r\n      dragConstraints={{ left: 0, right: window.innerWidth - 50 }}\r\n      whileTap={{ cursor: \"grabbing\" }}\r\n      onDrag={handleDrag}\r\n      dragMomentum={false}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nfunction getRandomColor() {\r\n  const randomHex = Math.floor(Math.random() * 16777215).toString(16);\r\n  return `#${randomHex.length < 6 ? randomHex + \"a\" : randomHex}`;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}