{"version":3,"sources":["switch.png","switch-sound.mp3","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GENERATIVE_ART_URL","SWITCH_SOUND","Audio","switchAudioUrl","App","useState","thingToDo","setThingToDo","getRandomColor","hoverColor","setHoverColor","isLightOn","setIsLightOn","hasActivatedSwitch","setHasActivatedSwitch","handleDrag","useCallback","_e","y","point","play","e","DOMException","prev","useEffect","a","fetch","resp","json","activity","toLowerCase","style","filter","motion","img","src","switchImgUrl","drag","whileTap","cursor","dragMomentum","dragElastic","dragConstraints","top","bottom","position","left","width","onDrag","onDragEnd","className","Avatar","ProjectPoster","whileHover","variants","actionButton","backgroundColor","onMouseLeave","onClick","window","location","href","ProjectTitle","title","scale","ActivitySuggestion","span","transition","repeat","Infinity","duration","animate","rotate","onTouchEnd","preventDefault","draggable","alt","type","children","div","cx","clickable","Boolean","props","initial","randomHex","Math","floor","random","toString","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb81ad79.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/switch.5a4fe930.png\";","export default __webpack_public_path__ + \"static/media/switch-sound.0d19c9a6.mp3\";","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport cx from \"classnames\";\r\nimport {\r\n  AnimationProps,\r\n  DraggableProps,\r\n  DragHandlers,\r\n  HoverHandlers,\r\n  motion,\r\n  PanInfo,\r\n} from \"framer-motion\";\r\n\r\nimport switchImgUrl from \"./switch.png\";\r\nimport switchAudioUrl from \"./switch-sound.mp3\";\r\nimport \"./App.css\";\r\nimport \"./Reset.css\";\r\n\r\nconst GENERATIVE_ART_URL = \"https://albertqm.github.io/generative-art/\";\r\nconst SWITCH_SOUND = new Audio(switchAudioUrl);\r\n\r\nexport default function App() {\r\n  const [thingToDo, setThingToDo] = useState<string | undefined>();\r\n  const [hoverColor, setHoverColor] = useState(getRandomColor());\r\n\r\n  const [isLightOn, setIsLightOn] = useState(true);\r\n  const [hasActivatedSwitch, setHasActivatedSwitch] = useState(false);\r\n  const handleDrag: DragHandlers[\"onDrag\"] = useCallback(\r\n    (_e, { point: { y } }) => {\r\n      if (hasActivatedSwitch) {\r\n        return;\r\n      }\r\n\r\n      if (y > 200) {\r\n        try {\r\n          SWITCH_SOUND.play();\r\n        } catch (e) {\r\n          if (e instanceof DOMException) {\r\n            // Likely \"play() failed because the user didn't interact with the document first\".\r\n            // No need to pollute the console with this error.\r\n          }\r\n        }\r\n        setHasActivatedSwitch(true);\r\n        setIsLightOn((prev) => !prev);\r\n      }\r\n    },\r\n    [hasActivatedSwitch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const resp = await fetch(\"https://www.boredapi.com/api/activity\");\r\n        const { activity }: { activity: string } = await resp.json();\r\n        setThingToDo(activity.toLowerCase());\r\n      } catch (error) {\r\n        setThingToDo(\r\n          \"fix the API Albert is using on this website to show a new activity every time\"\r\n        );\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ filter: `brightness(${isLightOn ? 1 : 0.5})` }}>\r\n      <motion.img\r\n        src={switchImgUrl}\r\n        drag=\"y\"\r\n        whileTap={{ cursor: \"grabbing\" }}\r\n        dragMomentum={false}\r\n        dragElastic={0.1} // Make it hard to drag far away (and expose top of switch)\r\n        dragConstraints={{ top: 0, bottom: 25 }}\r\n        style={{\r\n          position: \"absolute\",\r\n          top: -150,\r\n          left: 25,\r\n          width: 100,\r\n        }}\r\n        onDrag={handleDrag}\r\n        onDragEnd={() => setHasActivatedSwitch(false)}\r\n      ></motion.img>\r\n      <div className=\"container\">\r\n        <Avatar />\r\n        <div className=\"intro-container\">\r\n          {`Hey, I'm Albert. \r\n          I mostly create Web-related products for a living.`}\r\n        </div>\r\n      </div>\r\n      <ProjectPoster\r\n        whileHover=\"actionButton\"\r\n        variants={{ actionButton: { backgroundColor: hoverColor } }}\r\n        onMouseLeave={() => setHoverColor(getRandomColor())}\r\n        onClick={() => (window.location.href = GENERATIVE_ART_URL)}\r\n      >\r\n        <ProjectTitle\r\n          title={\r\n            <motion.a\r\n              href={GENERATIVE_ART_URL}\r\n              className=\"project-title\"\r\n              variants={{ actionButton: { scale: 1.2 } }}\r\n            >\r\n              Generative Art\r\n            </motion.a>\r\n          }\r\n        />\r\n      </ProjectPoster>\r\n      <ProjectPoster>\r\n        <ActivitySuggestion thingToDo={thingToDo} />\r\n      </ProjectPoster>\r\n      <ProjectPoster>\r\n        <ProjectTitle\r\n          title={\r\n            <motion.span\r\n              transition={{ repeat: Infinity, duration: 2 }}\r\n              animate={{ rotate: [-10, 10, -10] }}\r\n            >\r\n              More stuff to come...\r\n            </motion.span>\r\n          }\r\n        />\r\n      </ProjectPoster>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Avatar() {\r\n  return (\r\n    <div className=\"avatar-container\" onTouchEnd={(e) => e.preventDefault()}>\r\n      <motion.img\r\n        draggable={false}\r\n        className=\"avatar-img\"\r\n        src=\"https://avatars.githubusercontent.com/u/33761650?v=4\"\r\n        alt=\"A photo of Albert's face\"\r\n        whileHover={{\r\n          rotate: 360,\r\n        }}\r\n        whileTap={{ rotate: 360 }}\r\n        transition={{\r\n          type: \"spring\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ProjectPoster({\r\n  children,\r\n  whileHover,\r\n  variants,\r\n  onClick,\r\n  onMouseLeave,\r\n}: {\r\n  children: React.ReactNode;\r\n  whileHover?: HoverHandlers[\"whileHover\"];\r\n  variants?: AnimationProps[\"variants\"];\r\n  onClick?: () => void;\r\n  onMouseLeave?: () => void;\r\n}) {\r\n  return (\r\n    <motion.div\r\n      className={cx(\"project-poster\", { clickable: Boolean(onClick) })}\r\n      whileHover={whileHover}\r\n      variants={variants}\r\n      onMouseLeave={onMouseLeave}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nfunction ProjectTitle({ title }: { title: React.ReactNode }) {\r\n  return <header className=\"project-title\">{title}</header>;\r\n}\r\n\r\nfunction ActivitySuggestion(props: { thingToDo: string | undefined }) {\r\n  const { thingToDo } = props;\r\n  return (\r\n    <div className=\"activity-suggestion\">\r\n      While I build this, why don't you...\r\n      {thingToDo && (\r\n        <motion.div initial={{ y: -500 }} animate={{ y: 0 }}>\r\n          {thingToDo}?\r\n        </motion.div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * @example\r\n *         <Knob\r\n          onDrag={({ x }) => setHueRotate(x)}\r\n          drag=\"x\"\r\n          dragConstraints={{\r\n            left: 0,\r\n            right: (containerRect?.right ?? window.innerWidth) - 30,\r\n          }}\r\n        >\r\n          🎨\r\n        </Knob>\r\n        <Knob\r\n          onDrag={({ y }) =>\r\n            setBrightness(\r\n              1 - y / ((containerRect?.height ?? window.innerWidth) - 30)\r\n            )\r\n          }\r\n          drag=\"y\"\r\n          dragConstraints={{\r\n            top: 0,\r\n            bottom: (containerRect?.bottom ?? window.innerHeight) - 30,\r\n          }}\r\n        >\r\n          💡\r\n        </Knob>\r\n */\r\nfunction Knob({\r\n  children,\r\n  onDrag,\r\n  ...draggableProps\r\n}: React.PropsWithChildren<\r\n  {\r\n    onDrag: ({ x, y }: { x: number; y: number }) => void;\r\n  } & Omit<DraggableProps, \"onDrag\">\r\n>) {\r\n  const handleDrag = useCallback(\r\n    (_e, { point: { x, y } }: PanInfo) => {\r\n      onDrag({ x, y });\r\n    },\r\n    [onDrag]\r\n  );\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"knob\"\r\n      drag\r\n      whileDrag={{ scale: 1.1 }}\r\n      whileTap={{ cursor: \"grabbing\" }}\r\n      onDrag={handleDrag}\r\n      dragMomentum={false}\r\n      {...draggableProps}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nfunction getRandomColor() {\r\n  const randomHex = Math.floor(Math.random() * 16777215).toString(16);\r\n  return `#${randomHex.length < 6 ? randomHex + \"a\" : randomHex}`;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}