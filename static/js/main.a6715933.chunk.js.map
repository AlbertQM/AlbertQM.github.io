{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","thingToDo","setThingToDo","useEffect","a","fetch","resp","json","activity","toLowerCase","mouseX","useMotionValue","mouseY","rotateX","useTransform","rotateY","onMouseMove","e","movementX","movementY","set","clientX","clientY","window","addEventListener","removeEventListener","className","motion","div","initial","opacity","animate","style","perspective","img","src","alt","whileHover","rotate","border","Colors","orange","whileTap","borderColor","transition","type","WIPHeader","ActivitySuggestion","span","repeat","Infinity","duration","props","y","black","red","yellow","blue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAIe,SAASA,IACtB,MAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,+EAEsBC,MAAM,yCAF5B,cAESC,EAFT,gBAGoDA,EAAKC,OAHzD,gBAGWC,EAHX,EAGWA,SACRN,EAAaM,EAASC,eAJzB,kDAMGP,EACE,iFAPL,yDAAD,KAWC,IAEH,IAAMQ,EAASC,YAAe,KACxBC,EAASD,YAAe,KACxBE,EAAUC,YAAaF,EAAQ,CAAC,EAAG,KAAM,CAAC,IAAK,KAC/CG,EAAUD,YAAaJ,EAAQ,CAAC,EAAG,KAAM,EAAE,GAAI,KAqBrD,OApBAP,qBAAU,WAER,SAASa,EAAYC,GACc,IAAhBA,EAAEC,WAAmC,IAAhBD,EAAEE,YAMxCT,EAAOU,IAAIH,EAAEI,SACbT,EAAOQ,IAAIH,EAAEK,UAKf,OAFAC,OAAOC,iBAAiB,YAAaR,GAE9B,WACLO,OAAOE,oBAAoB,YAAaT,MAEzC,IAGD,sBAAKU,UAAU,YAAf,UACE,cAACC,EAAA,EAAOC,IAAR,CACEF,UAAW,mBACXG,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,MAAO,CAAEC,YAAa,KAJxB,SAME,cAACN,EAAA,EAAOO,IAAR,CACER,UAAU,aACVS,IAAI,uDACJC,IAAI,2BACJJ,MAAO,CAAEnB,QAASA,EAASE,QAASA,GACpCsB,WAAY,CACVC,OAAQ,IACRC,OAAO,aAAD,OAAeC,EAAOC,SAE9BC,SAAU,CAAEJ,OAAQ,IAAKK,YAAaH,EAAOC,QAC7CG,WAAY,CACVC,KAAM,cAIZ,gCACE,cAACC,EAAD,IACA,cAACC,EAAD,CAAoB9C,UAAWA,UAMvC,SAAS6C,IACP,OACE,wBAAQpB,UAAU,MAAlB,SACE,cAACC,EAAA,EAAOqB,KAAR,CACEJ,WAAY,CAAEK,OAAQC,IAAUC,SAAU,GAC1CpB,QAAS,CAAEO,OAAQ,EAAE,GAAI,IAAK,KAFhC,iCAUN,SAASS,EAAmBK,GAC1B,IAAQnD,EAAcmD,EAAdnD,UACR,OACE,sBAAKyB,UAAU,sBAAf,0DAEGzB,GACC,eAAC0B,EAAA,EAAOC,IAAR,CAAYC,QAAS,CAAEwB,EAAG,KAAOtB,QAAS,CAAEsB,EAAG,GAA/C,UACGpD,EADH,UAQR,IAAMuC,EAAS,CACbc,MAAO,UACPC,IAAK,UACLd,OAAQ,UACRe,OAAQ,UACRC,KAAM,WC9FOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6715933.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const [thingToDo, setThingToDo] = useState<string | undefined>();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const resp = await fetch(\"https://www.boredapi.com/api/activity\");\r\n        const { activity }: { activity: string } = await resp.json();\r\n        setThingToDo(activity.toLowerCase());\r\n      } catch (error) {\r\n        setThingToDo(\r\n          \"fix the API Albert is using on this website to show a new activity every time\"\r\n        );\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const mouseX = useMotionValue(200);\r\n  const mouseY = useMotionValue(200);\r\n  const rotateX = useTransform(mouseY, [0, 400], [45, -45]);\r\n  const rotateY = useTransform(mouseX, [0, 400], [-45, 45]);\r\n  useEffect(() => {\r\n    // TODO throttle this function.\r\n    function onMouseMove(e: MouseEvent) {\r\n      const isMobile = e.movementX === 0 && e.movementY === 0;\r\n      if (isMobile) {\r\n        // TODO Add animation for mobile\r\n        return;\r\n      }\r\n\r\n      mouseX.set(e.clientX);\r\n      mouseY.set(e.clientY);\r\n    }\r\n\r\n    window.addEventListener(\"mousemove\", onMouseMove);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", onMouseMove);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <motion.div\r\n        className={\"avatar-container\"}\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        style={{ perspective: 400 }}\r\n      >\r\n        <motion.img\r\n          className=\"avatar-img\"\r\n          src=\"https://avatars.githubusercontent.com/u/33761650?v=4\"\r\n          alt=\"A photo of Albert's face\"\r\n          style={{ rotateX: rotateX, rotateY: rotateY }}\r\n          whileHover={{\r\n            rotate: 360,\r\n            border: `4px solid ${Colors.orange}`,\r\n          }}\r\n          whileTap={{ rotate: 360, borderColor: Colors.orange }}\r\n          transition={{\r\n            type: \"spring\",\r\n          }}\r\n        />\r\n      </motion.div>\r\n      <div>\r\n        <WIPHeader />\r\n        <ActivitySuggestion thingToDo={thingToDo} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction WIPHeader() {\r\n  return (\r\n    <header className=\"WIP\">\r\n      <motion.span\r\n        transition={{ repeat: Infinity, duration: 2 }}\r\n        animate={{ rotate: [-25, 25, -25] }}\r\n      >\r\n        Work in progress.\r\n      </motion.span>\r\n    </header>\r\n  );\r\n}\r\n\r\nfunction ActivitySuggestion(props: { thingToDo: string | undefined }) {\r\n  const { thingToDo } = props;\r\n  return (\r\n    <div className=\"activity-suggestion\">\r\n      However, while I build this, why don't you...\r\n      {thingToDo && (\r\n        <motion.div initial={{ y: 500 }} animate={{ y: 0 }}>\r\n          {thingToDo}?\r\n        </motion.div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Colors = {\r\n  black: \"#0c090d\",\r\n  red: \"#e01a4f\",\r\n  orange: \"#f15946\",\r\n  yellow: \"#f9c22e\",\r\n  blue: \"#53b3cb\",\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}