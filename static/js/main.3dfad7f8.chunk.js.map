{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["GENERATIVE_ART_URL","App","useState","thingToDo","setThingToDo","getRandomColor","hoverColor","setHoverColor","useEffect","a","fetch","resp","json","activity","toLowerCase","className","Avatar","ProjectPoster","whileHover","variants","actionButton","backgroundColor","onMouseLeave","onClick","window","location","href","ProjectTitle","title","motion","scale","ActivitySuggestion","span","transition","repeat","Infinity","duration","animate","rotate","div","img","src","alt","border","Colors","orange","whileTap","borderColor","type","children","cx","clickable","Boolean","props","initial","y","black","red","yellow","blue","Math","floor","random","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAKMA,EAAqB,6CAEZ,SAASC,IACtB,MAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAASG,KAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAdAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,+EAEsBC,MAAM,yCAF5B,cAESC,EAFT,gBAGoDA,EAAKC,OAHzD,gBAGWC,EAHX,EAGWA,SACRT,EAAaS,EAASC,eAJzB,kDAMGV,EACE,iFAPL,yDAAD,KAWC,IAGD,qCACE,sBAAKW,UAAU,YAAf,UACE,cAACC,EAAD,IACA,qBAAKD,UAAU,kBAAf,gGAKF,cAACE,EAAD,CACEC,WAAW,eACXC,SAAU,CAAEC,aAAc,CAAEC,gBAAiBf,IAC7CgB,aAAc,kBAAMf,EAAcF,MAClCkB,QAAS,kBAAOC,OAAOC,SAASC,KAAO1B,GAJzC,SAME,cAAC2B,EAAD,CACEC,MACE,cAACC,EAAA,EAAOpB,EAAR,CACEiB,KAAM1B,EACNe,UAAU,gBACVI,SAAU,CAAEC,aAAc,CAAEU,MAAO,MAHrC,gCAUN,cAACb,EAAD,UACE,cAACc,EAAD,CAAoB5B,UAAWA,MAEjC,cAACc,EAAD,UACE,cAACU,EAAD,CACEC,MACE,cAACC,EAAA,EAAOG,KAAR,CACEC,WAAY,CAAEC,OAAQC,IAAUC,SAAU,GAC1CC,QAAS,CAAEC,OAAQ,EAAE,GAAI,IAAK,KAFhC,0CAaZ,SAAStB,IACP,OACE,cAACa,EAAA,EAAOU,IAAR,CAAYxB,UAAW,mBAAvB,SACE,cAACc,EAAA,EAAOW,IAAR,CACEzB,UAAU,aACV0B,IAAI,uDACJC,IAAI,2BACJxB,WAAY,CACVoB,OAAQ,IACRK,OAAO,aAAD,OAAeC,EAAOC,SAE9BC,SAAU,CAAER,OAAQ,IAAKS,YAAaH,EAAOC,QAC7CZ,WAAY,CACVe,KAAM,cAOhB,SAAS/B,EAAT,GAYI,IAXFgC,EAWC,EAXDA,SACA/B,EAUC,EAVDA,WACAC,EASC,EATDA,SACAI,EAQC,EARDA,QACAD,EAOC,EAPDA,aAQA,OACE,cAACO,EAAA,EAAOU,IAAR,CACExB,UAAWmC,IAAG,iBAAkB,CAAEC,UAAWC,QAAQ7B,KACrDL,WAAYA,EACZC,SAAUA,EACVG,aAAcA,EACdC,QAASA,EALX,SAOG0B,IAKP,SAAStB,EAAT,GAA8D,IAAtCC,EAAqC,EAArCA,MACtB,OAAO,wBAAQb,UAAU,gBAAlB,SAAmCa,IAG5C,SAASG,EAAmBsB,GAC1B,IAAQlD,EAAckD,EAAdlD,UACR,OACE,sBAAKY,UAAU,sBAAf,iDAEGZ,GACC,eAAC0B,EAAA,EAAOU,IAAR,CAAYe,QAAS,CAAEC,GAAI,KAAOlB,QAAS,CAAEkB,EAAG,GAAhD,UACGpD,EADH,UAQR,IAAMyC,EAAS,CACbY,MAAO,UACPC,IAAK,UACLZ,OAAQ,UACRa,OAAQ,UACRC,KAAM,WAGR,SAAStD,IACP,MAAM,IAAN,OAAWuD,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,KC9I3D,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3dfad7f8.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport cx from \"classnames\";\nimport { AnimationProps, HoverHandlers, motion } from \"framer-motion\";\nimport \"./App.css\";\n\nconst GENERATIVE_ART_URL = \"https://albertqm.github.io/generative-art/\";\n\nexport default function App() {\n  const [thingToDo, setThingToDo] = useState<string | undefined>();\n  const [hoverColor, setHoverColor] = useState(getRandomColor());\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resp = await fetch(\"https://www.boredapi.com/api/activity\");\n        const { activity }: { activity: string } = await resp.json();\n        setThingToDo(activity.toLowerCase());\n      } catch (error) {\n        setThingToDo(\n          \"fix the API Albert is using on this website to show a new activity every time\"\n        );\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      <div className=\"container\">\n        <Avatar />\n        <div className=\"intro-container\">\n          {`Hey, I'm Albert. \n          I mostly create Web-related products for a living.`}\n        </div>\n      </div>\n      <ProjectPoster\n        whileHover=\"actionButton\"\n        variants={{ actionButton: { backgroundColor: hoverColor } }}\n        onMouseLeave={() => setHoverColor(getRandomColor())}\n        onClick={() => (window.location.href = GENERATIVE_ART_URL)}\n      >\n        <ProjectTitle\n          title={\n            <motion.a\n              href={GENERATIVE_ART_URL}\n              className=\"project-title\"\n              variants={{ actionButton: { scale: 1.2 } }}\n            >\n              Generative Art\n            </motion.a>\n          }\n        />\n      </ProjectPoster>\n      <ProjectPoster>\n        <ActivitySuggestion thingToDo={thingToDo} />\n      </ProjectPoster>\n      <ProjectPoster>\n        <ProjectTitle\n          title={\n            <motion.span\n              transition={{ repeat: Infinity, duration: 2 }}\n              animate={{ rotate: [-10, 10, -10] }}\n            >\n              More stuff to come...\n            </motion.span>\n          }\n        />\n      </ProjectPoster>\n    </>\n  );\n}\n\nfunction Avatar() {\n  return (\n    <motion.div className={\"avatar-container\"}>\n      <motion.img\n        className=\"avatar-img\"\n        src=\"https://avatars.githubusercontent.com/u/33761650?v=4\"\n        alt=\"A photo of Albert's face\"\n        whileHover={{\n          rotate: 360,\n          border: `4px solid ${Colors.orange}`,\n        }}\n        whileTap={{ rotate: 360, borderColor: Colors.orange }}\n        transition={{\n          type: \"spring\",\n        }}\n      />\n    </motion.div>\n  );\n}\n\nfunction ProjectPoster({\n  children,\n  whileHover,\n  variants,\n  onClick,\n  onMouseLeave,\n}: {\n  children: React.ReactNode;\n  whileHover?: HoverHandlers[\"whileHover\"];\n  variants?: AnimationProps[\"variants\"];\n  onClick?: () => void;\n  onMouseLeave?: () => void;\n}) {\n  return (\n    <motion.div\n      className={cx(\"project-poster\", { clickable: Boolean(onClick) })}\n      whileHover={whileHover}\n      variants={variants}\n      onMouseLeave={onMouseLeave}\n      onClick={onClick}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nfunction ProjectTitle({ title }: { title: React.ReactNode }) {\n  return <header className=\"project-title\">{title}</header>;\n}\n\nfunction ActivitySuggestion(props: { thingToDo: string | undefined }) {\n  const { thingToDo } = props;\n  return (\n    <div className=\"activity-suggestion\">\n      While I build this, why don't you...\n      {thingToDo && (\n        <motion.div initial={{ y: -500 }} animate={{ y: 0 }}>\n          {thingToDo}?\n        </motion.div>\n      )}\n    </div>\n  );\n}\n\nconst Colors = {\n  black: \"#0c090d\",\n  red: \"#e01a4f\",\n  orange: \"#f15946\",\n  yellow: \"#f9c22e\",\n  blue: \"#53b3cb\",\n};\n\nfunction getRandomColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}